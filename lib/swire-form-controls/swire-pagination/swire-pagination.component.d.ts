import { EventEmitter, OnInit } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import * as i0 from "@angular/core";
export declare class SwirePaginationComponent implements OnInit, ControlValueAccessor {
    page: number;
    FILTER_PAG_REGEX: RegExp;
    showCustomizedPages: boolean;
    collectionSize: number;
    maxSize: number;
    rotateSwirePaginationLink: boolean;
    showEllipses: boolean;
    showBoundaryLinks: boolean;
    swirePageSize: number;
    premiumData: any;
    displayedRangeOfRecords: any;
    paginateData: any[];
    showPaginatorForPage: boolean;
    showPaginatorForItem: boolean;
    swireDataForPagination: any;
    szPaginationType: string;
    swiResponsiveClass: string;
    updateRecord: EventEmitter<any>;
    szValue: null;
    touched: boolean;
    disabled: boolean;
    onChange: (szValue: any) => void;
    onTouched: () => void;
    constructor();
    writeValue(szValue: any): void;
    registerOnChange(onChange: any): void;
    registerOnTouched(onTouched: any): void;
    setDisabledState?(isDisabled: boolean): void;
    onChangeHandler(e: any): void;
    markAsTouched(): void;
    ngOnInit(): void;
    selectPage(page: string): void;
    formatInput(input: HTMLInputElement): void;
    getPremiumData(): void;
    itemsPerPage(item: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<SwirePaginationComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SwirePaginationComponent, "swire-pagination", never, { "collectionSize": "collectionSize"; "maxSize": "maxSize"; "rotateSwirePaginationLink": "rotateSwirePaginationLink"; "showEllipses": "showEllipses"; "showBoundaryLinks": "showBoundaryLinks"; "swirePageSize": "swirePageSize"; "showPaginatorForPage": "showPaginatorForPage"; "showPaginatorForItem": "showPaginatorForItem"; "swireDataForPagination": "swireDataForPagination"; "szPaginationType": "szPaginationType"; "swiResponsiveClass": "swiResponsiveClass"; }, { "updateRecord": "updateRecord"; }, never, never>;
}
